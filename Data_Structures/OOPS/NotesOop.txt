Q1. What Is Object-Oriented Programming in Python?

Object-oriented programming is a programming paradigm that provides a means of structuring programs so that properties and behaviors are
bundled into individual objects. (using a class we are able to give same properties to all objects of a class)

For instance, an object could represent a person with properties like a name, age, and address and behaviors such as walking, talking,
breathing, and running. Or it could represent an email with properties like a recipient list, subject, and body and behaviors like
adding attachments and sending.

*********************************************************************************************************************
Constructor -

def __init__(self):
The properties that all Class objects must have are defined in a method called .__init__(). Every time a new Class object is created,
 .__init__() sets the  initial state of the object by assigning the values of the object’s properties.
That is, .__init__() initializes each new instance of the class. eg

class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

In the body of .__init__(), there are two statements using the self variable:

1. self.name = name   # creates an attribute called name and assigns to it the value of the name parameter.
2  self.age = age     # creates an attribute called age and assigns to it the value of the age parameter.

************************************************************************************************************************
Instance Attributes-
Attributes created in .__init__() are called instance attributes. An instance attribute’s value is specific to a particular instance of
the class. All Dog objects have a name and an age, but the values for the name and age attributes will vary depending on the Dog instance.

Class Attributes-
On the other hand, class attributes are attributes that have the same value for all class instances. You can define a class attribute by
assigning a value to a variable name outside of .__init__().

For example, the following Dog class has a class attribute called species with the value "Canis familiaris":

class Dog:
    # Class attribute
    species = "Canis familiaris"

    def __init__(self, name, age):
        self.name = name
        self.age = age

****************************************************************************************************************************
Creating a new object from a class is called instantiating an object. You can instantiate a new Dog object by typing the 
name of the class, followed by opening and closing parentheses:

eg Dog()

a=Dog()
b=Dog()